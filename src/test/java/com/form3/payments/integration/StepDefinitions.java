package com.form3.payments.integration;

import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;

import com.form3.payments.model.Payment;
import cucumber.api.java.Before;
import cucumber.api.java.en.And;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;
import java.util.Optional;
import org.junit.Ignore;
import org.springframework.http.ResponseEntity;

/**
 * Step Definitions for Cucumber BDD scenarios
 */
@Ignore
public class StepDefinitions extends AbstractSpringTest {

  // Keep track of the response between steps within a scenario
  private Optional<ResponseEntity<Payment>> response = Optional.empty();
  // Keep track of the last paymentId generated by the database, so we can fetch it in a subsequent step
  private Optional<String> lastPaymentId = Optional.empty();
  // To test 404 not found fail case
  private String FAKE_PAYMENT_ID = "1234";

  @Before
  public void setUp() {
    // Wipe the local state between scenarios
    response = Optional.empty();
    lastPaymentId = Optional.empty();
  }

  // Helper that is used by multiple steps
  private void postPayment() {
    response = Optional.of(executePost(new Payment()));
    lastPaymentId = Optional.of(response.get().getBody().getId());
  }

  @When("^the client calls POST /payment$")
  public void the_client_issues_POST_payment() {
    postPayment();
  }

  @Then("the client receives status code of {string}")
  public void the_client_receives_status_code_of(String expectedStatusCode) {
    assert(response.isPresent());
    String actualStatusCode = response.get().getStatusCode().toString();
    assertThat("status code is incorrect : ", actualStatusCode, is(expectedStatusCode));
  }

  @Given("a payment was created previously")
  public void a_payment_was_created_previously() {
    postPayment();
  }


  @When("^the client calls GET /payment$")
  public void the_client_issues_GET_payment() {
    // Either GET using the last generated paymentID, if one exists (success case)
    // or try to GET using a fake ID (failure case)
    response = lastPaymentId.map(
        id -> Optional.of(executeGet(id)))
        .orElseGet(() -> Optional.of(executeGet(FAKE_PAYMENT_ID)));
  }

  @And("the client receives a payment")
  public void the_client_receives_a_payment() {
    assert(response.isPresent());
    Payment payment = response.get().getBody();
    assertThat(payment, is(notNullValue()));
    assert(payment.hasId());
  }

  @When("^the client calls PUT /payment$")
  public void the_client_issues_PUT_payment() {
    // PUT an existing payment (success case)
    if (response.isPresent()) {
      Payment updatedPayment = response.get().getBody();
      assertThat(updatedPayment, notNullValue());
      updatedPayment.setVersion(2);
      response = Optional.of(executePut(updatedPayment));
    } else {
      // Try to PUT a non-existent payment (failure case)
      response = Optional.of(executePut(new Payment().setId(FAKE_PAYMENT_ID)));
    }
  }
}