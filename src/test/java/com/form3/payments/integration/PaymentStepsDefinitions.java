package com.form3.payments.integration;

import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;

import com.form3.payments.model.Payment;
import cucumber.api.java.en.And;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;
import java.util.Optional;
import javax.swing.text.html.Option;
import org.junit.Ignore;
import org.springframework.http.ResponseEntity;

/**
 * Step Definitions to run Cucumber BDD tests using SpringBoot context
 */
@Ignore
public class PaymentStepsDefinitions extends SpringIntegrationTest {

  private String FAKE_PAYMENT_ID = "1234";
  // Keep track of the last paymentId generated by the database, so we can fetch it back later
  private Optional<String> lastPaymentId = Optional.empty();

  @When("^the client calls POST /payment$")
  public void the_client_issues_POST_payment() {
    post(new Payment());
  }

  @Then("the client receives status code of {string}")
  public void the_client_receives_status_code_of(String statusCode) {
    ResponseEntity response = getLatestResponse().get();
    assertThat("status code is incorrect : " +
        response.getBody(), response.getStatusCode().toString(), is(statusCode));
  }

  @Given("a payment was created previously")
  public void a_payment_was_created_previously() {
    Payment created = (Payment) post(new Payment()).get().getBody();
    lastPaymentId = Optional.of(created.getId());
  }

  @Given("a payment wasnt created yet")
  public void a_payment_wasnt_created_yet() {
    lastPaymentId = Optional.empty();
    //latestResponse =
  }

  @When("^the client calls GET /payment$")
  public void the_client_issues_GET_payment() {
    if (lastPaymentId.isPresent()) {
      get(lastPaymentId.get());
    } else {
      get(FAKE_PAYMENT_ID);
    }
  }

  @And("the client receives a payment")
  public void the_client_receives_a_payment() {
    Payment payment = (Payment) getLatestResponse().get().getBody();
    assertThat(payment.getId(), is(lastPaymentId.get()));
  }

  @When("^the client calls PUT /payment$")
  public void the_client_issues_PUT_payment() {
    // PUT an existing payment
    if(getLatestResponse().isPresent()) {
      Payment updatedPayment = (Payment) getLatestResponse().get().getBody();
      assertThat(updatedPayment, notNullValue());
      updatedPayment.setVersion(2);
      put(updatedPayment);
    } else {
      // Try to PUT a non-existent payment
      put(new Payment().setId(FAKE_PAYMENT_ID));
    }
  }
}